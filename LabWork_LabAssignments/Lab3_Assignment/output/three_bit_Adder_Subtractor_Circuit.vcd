$date
	Sat Sep 28 10:56:04 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module t_three_bit_Adder_Subtractor_Circuit $end
$var wire 1 ! V $end
$var wire 3 " S [2:0] $end
$var wire 1 # C $end
$var reg 3 $ A [2:0] $end
$var reg 3 % B [2:0] $end
$var reg 1 & CTR $end
$scope module tbASC $end
$var wire 3 ' A [2:0] $end
$var wire 3 ( B [2:0] $end
$var wire 1 # C $end
$var wire 1 & CTR $end
$var wire 1 ! V $end
$var wire 1 ) c3 $end
$var wire 1 * c2 $end
$var wire 1 + c1 $end
$var wire 3 , SUM [2:0] $end
$scope module u0 $end
$var wire 1 - A $end
$var wire 1 . B $end
$var wire 1 & CTR $end
$var wire 1 & prev_Carry $end
$var wire 1 / xor_to_FA $end
$var wire 1 0 Sum $end
$var wire 1 + Carry $end
$scope module g2 $end
$var wire 1 - A $end
$var wire 1 / B $end
$var wire 1 & C_in $end
$var wire 1 + C_out $end
$var wire 1 0 S $end
$var wire 1 1 P $end
$var wire 1 2 G2 $end
$var wire 1 3 G1 $end
$scope module hf1 $end
$var wire 1 - A $end
$var wire 1 / B $end
$var wire 1 3 C $end
$var wire 1 1 S $end
$upscope $end
$scope module hf2 $end
$var wire 1 1 A $end
$var wire 1 & B $end
$var wire 1 2 C $end
$var wire 1 0 S $end
$upscope $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 1 4 A $end
$var wire 1 5 B $end
$var wire 1 & CTR $end
$var wire 1 + prev_Carry $end
$var wire 1 6 xor_to_FA $end
$var wire 1 7 Sum $end
$var wire 1 * Carry $end
$scope module g2 $end
$var wire 1 4 A $end
$var wire 1 6 B $end
$var wire 1 & C_in $end
$var wire 1 * C_out $end
$var wire 1 7 S $end
$var wire 1 8 P $end
$var wire 1 9 G2 $end
$var wire 1 : G1 $end
$scope module hf1 $end
$var wire 1 4 A $end
$var wire 1 6 B $end
$var wire 1 : C $end
$var wire 1 8 S $end
$upscope $end
$scope module hf2 $end
$var wire 1 8 A $end
$var wire 1 & B $end
$var wire 1 9 C $end
$var wire 1 7 S $end
$upscope $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 1 ; A $end
$var wire 1 < B $end
$var wire 1 & CTR $end
$var wire 1 * prev_Carry $end
$var wire 1 = xor_to_FA $end
$var wire 1 > Sum $end
$var wire 1 ) Carry $end
$scope module g2 $end
$var wire 1 ; A $end
$var wire 1 = B $end
$var wire 1 & C_in $end
$var wire 1 ) C_out $end
$var wire 1 > S $end
$var wire 1 ? P $end
$var wire 1 @ G2 $end
$var wire 1 A G1 $end
$scope module hf1 $end
$var wire 1 ; A $end
$var wire 1 = B $end
$var wire 1 A C $end
$var wire 1 ? S $end
$upscope $end
$scope module hf2 $end
$var wire 1 ? A $end
$var wire 1 & B $end
$var wire 1 @ C $end
$var wire 1 > S $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
b0 ,
0+
0*
0)
b0 (
b0 '
0&
b0 %
b0 $
0#
b0 "
0!
$end
#20
1+
17
13
18
00
b110 "
b110 ,
1>
1/
16
01
1?
1.
15
1-
1;
b11 %
b11 (
b101 $
b101 '
#40
1!
12
1+
11
03
08
0*
0?
1A
1#
1)
0/
00
06
17
09
1=
b110 "
b110 ,
1>
0@
1&
#60
1*
1!
1:
17
09
b110 "
b110 ,
1>
0@
0#
0)
16
0=
08
0?
0A
05
1<
14
0;
b101 %
b101 (
b11 $
b11 '
#80
0!
0*
0+
18
0:
1?
10
02
06
17
b111 "
b111 ,
1>
0.
0<
1;
0&
b0 %
b0 (
b111 $
b111 '
#100
01
13
1+
08
1:
1*
0?
1A
1#
1)
1/
10
02
16
17
09
1=
b111 "
b111 ,
1>
0@
1&
#120
10
02
0+
17
09
0*
b111 "
b111 ,
1>
0@
0#
0)
0/
06
0=
01
03
08
0:
0?
0A
1.
15
1<
0-
04
0;
b111 %
b111 (
b0 $
b0 '
#140
1!
1+
1#
1)
13
1A
1/
00
07
1=
b0 "
b0 ,
0>
05
1-
1;
0&
b101 %
b101 (
b101 $
b101 '
#160
1*
0!
12
1+
19
1@
1#
1)
11
03
18
1?
0A
0/
00
16
07
0=
b0 "
b0 ,
0>
1&
